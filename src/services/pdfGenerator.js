import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'

export const generateInvoicePDF = async (invoice, businessInfo) => {
  // Create a temporary div to render invoice content
  const invoiceElement = document.createElement('div')
  invoiceElement.innerHTML = `
    <div style="padding: 40px; font-family: Arial, sans-serif; color: #333;">
      <div style="text-align: center; margin-bottom: 30px;">
        ${businessInfo.logo_url ? `
          <div style="margin-bottom: 20px;">
            <img src="${businessInfo.logo_url}" alt="Business Logo" style="max-width: 150px; max-height: 80px; object-fit: contain;" />
          </div>
        ` : ''}
        <h1 style="color: #16a34a; margin: 0; font-size: 28px;">INVOICE</h1>
        <p style="margin: 5px 0; color: #666;">#${invoice.id.substring(0, 8).toUpperCase()}</p>
      </div>
      
      <div style="display: flex; justify-content: space-between; margin-bottom: 30px;">
        <div>
          <h3 style="color: #16a34a; margin: 0 0 10px 0;">From:</h3>
          <p style="margin: 2px 0; font-weight: bold;">${businessInfo.business_name}</p>
          <p style="margin: 2px 0;">${businessInfo.email}</p>
          <p style="margin: 2px 0;">${businessInfo.phone}</p>
        </div>
        <div>
          <h3 style="color: #16a34a; margin: 0 0 10px 0;">To:</h3>
          <p style="margin: 2px 0; font-weight: bold;">${invoice.customer_name}</p>
          <p style="margin: 2px 0;">${invoice.customer_phone}</p>
        </div>
      </div>
      
      <div style="margin-bottom: 20px;">
        <p style="margin: 5px 0;"><strong>Date:</strong> ${new Date(invoice.created_at).toLocaleDateString()}</p>
        <p style="margin: 5px 0;"><strong>Status:</strong> <span style="color: ${getStatusColor(invoice.status)}; font-weight: bold;">${invoice.status.toUpperCase()}</span></p>
      </div>
      
      <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
        <thead>
          <tr style="background-color: #f8f9fa;">
            <th style="border: 1px solid #ddd; padding: 12px; text-align: left;">Description</th>
            <th style="border: 1px solid #ddd; padding: 12px; text-align: right;">Qty</th>
            <th style="border: 1px solid #ddd; padding: 12px; text-align: right;">Rate (GHS)</th>
            <th style="border: 1px solid #ddd; padding: 12px; text-align: right;">Amount (GHS)</th>
          </tr>
        </thead>
        <tbody>
          ${invoice.items.map(item => `
            <tr>
              <td style="border: 1px solid #ddd; padding: 12px;">${item.description}</td>
              <td style="border: 1px solid #ddd; padding: 12px; text-align: right;">${item.quantity}</td>
              <td style="border: 1px solid #ddd; padding: 12px; text-align: right;">${item.rate.toFixed(2)}</td>
              <td style="border: 1px solid #ddd; padding: 12px; text-align: right;">${(item.quantity * item.rate).toFixed(2)}</td>
            </tr>
          `).join('')}
        </tbody>
      </table>
      
      <div style="text-align: right; margin-top: 20px;">
        <p style="margin: 5px 0;"><strong>Subtotal: GHS ${invoice.subtotal.toFixed(2)}</strong></p>
        ${invoice.discount > 0 ? `<p style="margin: 5px 0; color: #16a34a;"><strong>Discount: -GHS ${invoice.discount.toFixed(2)}</strong></p>` : ''}
        ${invoice.tax > 0 ? `<p style="margin: 5px 0;"><strong>Tax: GHS ${invoice.tax.toFixed(2)}</strong></p>` : ''}
        <p style="margin: 10px 0; font-size: 18px; color: #16a34a;"><strong>Total: GHS ${invoice.total_amount.toFixed(2)}</strong></p>
      </div>
      
      <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center; color: #666;">
        <p>Thank you for your business!</p>
        <p style="font-size: 12px;">Generated by Domens Invoice System</p>
      </div>
    </div>
  `
  
  // Hide the element
  invoiceElement.style.position = 'absolute'
  invoiceElement.style.left = '-9999px'
  invoiceElement.style.width = '800px'
  
  document.body.appendChild(invoiceElement)
  
  try {
    // Convert to canvas
    const canvas = await html2canvas(invoiceElement, {
      width: 800,
      height: 1200,
      scale: 2
    })
    
    // Create PDF
    const pdf = new jsPDF('p', 'mm', 'a4')
    const imgWidth = 210
    const pageHeight = 295
    const imgHeight = (canvas.height * imgWidth) / canvas.width
    let heightLeft = imgHeight
    
    let position = 0
    
    pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight)
    heightLeft -= pageHeight
    
    while (heightLeft >= 0) {
      position = heightLeft - imgHeight
      pdf.addPage()
      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight)
      heightLeft -= pageHeight
    }
    
    return pdf
  } finally {
    document.body.removeChild(invoiceElement)
  }
}

export const generateReceiptPDF = async (invoice, payment, businessInfo) => {
  const receiptElement = document.createElement('div')
  receiptElement.innerHTML = `
    <div style="padding: 40px; font-family: Arial, sans-serif; color: #333; max-width: 600px; margin: 0 auto;">
      <div style="text-align: center; margin-bottom: 30px;">
        ${businessInfo.logo_url ? `
          <div style="margin-bottom: 20px;">
            <img src="${businessInfo.logo_url}" alt="Business Logo" style="max-width: 150px; max-height: 80px; object-fit: contain;" />
          </div>
        ` : ''}
        <h1 style="color: #16a34a; margin: 0; font-size: 28px;">RECEIPT</h1>
        <p style="margin: 5px 0; color: #666;">#RCP-${invoice.id.substring(0, 8).toUpperCase()}</p>
      </div>
      
      <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
        <p style="margin: 5px 0; text-align: center; font-size: 18px; color: #16a34a;"><strong>PAYMENT CONFIRMED</strong></p>
        <p style="margin: 5px 0; text-align: center;">Amount: <strong>GHS ${invoice.total_amount.toFixed(2)}</strong></p>
        <p style="margin: 5px 0; text-align: center;">Date: ${new Date(payment.created_at).toLocaleDateString()}</p>
      </div>
      
      <div style="margin-bottom: 20px;">
        <h3 style="color: #16a34a;">Business Details</h3>
        <p style="margin: 2px 0;"><strong>${businessInfo.business_name}</strong></p>
        <p style="margin: 2px 0;">${businessInfo.email}</p>
        <p style="margin: 2px 0;">${businessInfo.phone}</p>
      </div>
      
      <div style="margin-bottom: 20px;">
        <h3 style="color: #16a34a;">Customer Details</h3>
        <p style="margin: 2px 0;"><strong>${invoice.customer_name}</strong></p>
        <p style="margin: 2px 0;">${invoice.customer_phone}</p>
      </div>
      
      <div style="margin-bottom: 20px;">
        <h3 style="color: #16a34a;">Payment Details</h3>
        <p style="margin: 5px 0;"><strong>Reference:</strong> ${payment.reference}</p>
        <p style="margin: 5px 0;"><strong>Method:</strong> ${payment.channel}</p>
        <p style="margin: 5px 0;"><strong>Amount:</strong> GHS ${invoice.total_amount.toFixed(2)}</p>
        <p style="margin: 5px 0;"><strong>Status:</strong> SUCCESSFUL</p>
      </div>
      
      <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center; color: #666;">
        <p>Thank you for your payment!</p>
        <p style="font-size: 12px;">Generated by Domens Invoice System</p>
      </div>
    </div>
  `
  
  receiptElement.style.position = 'absolute'
  receiptElement.style.left = '-9999px'
  receiptElement.style.width = '600px'
  
  document.body.appendChild(receiptElement)
  
  try {
    const canvas = await html2canvas(receiptElement, {
      width: 600,
      height: 800,
      scale: 2
    })
    
    const pdf = new jsPDF('p', 'mm', 'a4')
    const imgWidth = 210
    const imgHeight = (canvas.height * imgWidth) / canvas.width
    
    pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, 0, imgWidth, imgHeight)
    
    return pdf
  } finally {
    document.body.removeChild(receiptElement)
  }
}

const getStatusColor = (status) => {
  switch (status) {
    case 'paid': return '#16a34a'
    case 'sent': return '#0ea5e9'
    case 'draft': return '#6b7280'
    case 'overdue': return '#dc2626'
    default: return '#6b7280'
  }
}